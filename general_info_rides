WITH difference_in_seconds AS (
  SELECT
    started_at,
    ended_at,
    member_casual,
    rideable_type,
    start_station_name,
    TIMESTAMPDIFF(SECOND, started_at, ended_at) AS seconds
  FROM
    trip.combined_trip
),
differences AS (
  SELECT
    started_at,
    ended_at,
    seconds,
    member_casual,
    rideable_type,
    start_station_name,
    MOD(seconds, 60) AS seconds_part,
    MOD(seconds, 3600) AS minutes_part,
    MOD(seconds, 3600 * 24) AS hours_part
  FROM
    difference_in_seconds
),
average_difference AS (
  SELECT
    AVG(CASE WHEN member_casual = 'member' THEN seconds END) AS avg_member_seconds,
    MAX(CASE WHEN member_casual = 'member' THEN seconds END) AS max_member_seconds,
    AVG(CASE WHEN member_casual = 'casual' THEN seconds END) AS avg_casual_seconds,
    MAX(CASE WHEN member_casual = 'casual' THEN seconds END) AS max_casual_seconds,
    AVG(seconds) AS avg_seconds,
    MAX(seconds) AS max_seconds
  FROM
    differences
)

SELECT
  d.started_at,
  d.ended_at,
  d.member_casual,
  d.rideable_type,
  d.start_station_name,
  COUNT(*) AS ride_count,
  DAYNAME(d.started_at) AS start_day,
  DAYNAME(d.ended_at) AS end_day,
  CONCAT(
    FLOOR(d.seconds / 86400), ' days ',
    FLOOR((d.seconds % 86400) / 3600), ' hours ',
    FLOOR((d.seconds % 3600) / 60), ' minutes ',
    d.seconds % 60, ' seconds'
  ) AS ride_length,
  CONCAT(
    FLOOR(ad.avg_seconds / 86400), ' days ',
    FLOOR((ad.avg_seconds % 86400) / 3600), ' hours ',
    FLOOR(((ad.avg_seconds % 86400) % 3600) / 60), ' minutes ',
    FLOOR(ad.avg_seconds % 60), ' seconds'
  ) AS average_ride_length,
  CONCAT(
    FLOOR(ad.max_seconds / 86400), ' days ',
    FLOOR((ad.max_seconds % 86400) / 3600), ' hours ',
    FLOOR(((ad.max_seconds % 86400) % 3600) / 60), ' minutes ',
    FLOOR(ad.max_seconds % 60), ' seconds'
  ) AS max_ride_length,
  CONCAT(
    FLOOR(ad.avg_member_seconds / 86400), ' days ',
    FLOOR((ad.avg_member_seconds % 86400) / 3600), ' hours ',
    FLOOR(((ad.avg_member_seconds % 86400) % 3600) / 60), ' minutes ',
    FLOOR(ad.avg_member_seconds % 60), ' seconds'
  ) AS avg_member_ride_length,
  CONCAT(
    FLOOR(ad.max_member_seconds / 86400), ' days ',
    FLOOR((ad.max_member_seconds % 86400) / 3600), ' hours ',
    FLOOR(((ad.max_member_seconds % 86400) % 3600) / 60), ' minutes ',
    FLOOR(ad.max_member_seconds % 60), ' seconds'
  ) AS max_member_ride_length,
  CONCAT(
    FLOOR(ad.avg_casual_seconds / 86400), ' days ',
    FLOOR((ad.avg_casual_seconds % 86400) / 3600), ' hours ',
    FLOOR(((ad.avg_casual_seconds % 86400) % 3600) / 60), ' minutes ',
    FLOOR(ad.avg_casual_seconds % 60), ' seconds'
  ) AS avg_casual_ride_length,
  CONCAT(
    FLOOR(ad.max_casual_seconds / 86400), ' days ',
    FLOOR((ad.max_casual_seconds % 86400) / 3600), ' hours ',
    FLOOR(((ad.max_casual_seconds % 86400) % 3600) / 60), ' minutes ',
    FLOOR(ad.max_casual_seconds % 60), ' seconds'
  ) AS max_casual_ride_length
FROM
  differences d
JOIN
  average_difference ad ON 1 = 1 -- A constant condition to ensure a CROSS JOIN
GROUP BY
  d.started_at, d.ended_at, d.member_casual, d.rideable_type, d.start_station_name,
  start_day, end_day, ride_length, average_ride_length, max_ride_length,
  avg_member_ride_length, max_member_ride_length, avg_casual_ride_length, max_casual_ride_length;


1)Common Table Expressions (CTEs):

--difference_in_seconds: Calculates the duration of each ride in seconds.
--differences: Breaks down the duration into parts (seconds, minutes, hours) using the MOD function.
--average_difference: Calculates average and maximum ride durations for both member and casual users.
2)Main Query:

--Selects information from the differences CTE and joins it with the average_difference CTE using a constant condition (CROSS JOIN).
--Groups the results by various factors, including start and end times, user type (member_casual), rideable type, and start station name.
     Calculates various metrics:
     ride_count: Count of rides.
    start_day and end_day: Day of the week for the start and end times.
    ride_length: The total duration of each ride formatted in days, hours, minutes, and seconds.
    average_ride_length: Average ride duration formatted similarly.
    max_ride_length: Maximum ride duration formatted similarly.
3)Similar metrics for member and casual users separately.
4)The query provides detailed insights into ride patterns, including counts, day of the week information, total ride duration, average ride duration, and maximum ride duration. The results are grouped by various dimensions, offering a comprehensive analysis.
